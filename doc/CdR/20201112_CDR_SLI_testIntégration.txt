-------------------------------------------------------------------------------
July 2020

Test du projet UsbSerialForAndroid porté sur Xamarin.
Téléchargement du zip
mise au point pour la génération : 
	déploiement à activer (capricieux ça se désactive, il faut 'senfoncer dasn la configuration')
	il faut ajouter le device St à la liste des drivers connus : ccb3696fe0537ce773aed99e5a82aa619955e19f
	
Test : le device est listé, le driver est appliqué et on va pas plus loin. pas possible de debogger pour l'instant ! (il faut la tablette solsolution)


Installation du paquetage Nuget dans le projet Android Filaire.
	https://www.nuget.org/packages/LusoVU.XamarinUsbSerialForAndroid/

J'ai essayé "dépioter le code de démo" pour l'intégrer dans l'interface de l'IHM de test mais c'est impossible : le driver est fortement ancré dans la notion de tâche et la notion d'activité android, et basé sur la notification.
Il faut réaliser une intégration de plus haut niveau ou indépendamment de l'application

note : attention la connexion des câbles uUSB et adaptateur ne supporte qu'un sens : l'adaptateur mâle-femelle doit être du côté de la tablette.

-------------------------------------------------------------------------------
Jeudi 30/07

Je me rabats sur le getting started du projet d'origine qui est plus simple.
J'ai réussi à implémenter le driver : 
	- je ne suis pas arrivé à utiliser la fonction async FindAllDriver de UsbSerialForAndroid : l'attente sur le thread bloque indéfiniment. C'est surement conçu de cette façon. ==> Je me suis rabattu sur la méthode utilisant directement l'USBManager
	- En conséquence j'obtiens seulement un usbdevice (USBManager) mais la méthode UsbSerialForAndroid::ProbeDevice existe pour créer le driver à partir de l'USBDevice (ouf)
	
La connexion est capricieuse l'appli crash à la première demande d'autorisation, mais à la relance la connexion semble réussir.
Le échange ne fonctionnent  pas : timeout (pas implémentée ?) 

-------------------------------------------------------------------------------
Jeudi 31/07

je teste en debug avec ma tablette iWork
Lors de la première demande de permission une exception est levée : _usbManager.GetAccessoryList()[0] (pas d'élément)
Mais la demande est confirmée et la relance de l'application passe l'étape.

Revue la création du devserial : m_dll_if.CreateDevSerial(), "/dev/null")
==> permettre une chaine vide pour l'application d'un FD

Correction ordre des appels : open en doublon, close mal placé ce qui fait que ça n'aurait jamais pu marcher.

Ajout log d'appel dans la lib (printf) mais je n'arrive pas à les visualiser (syslog, console debogger... ?)

-------------------------------------------------------------------------------
Jeudi 21/09/


Reprise du code pour ajouter commentaire.
relecture doc android à propos de la connectivité USB : Accessoire ou Périphérique alimenté.

https://developer.android.com/guide/topics/connectivity/usb/accessory#java
https://developer.android.com/guide/topics/connectivity/usb/host

On est normalement dans le second cas il faut utiliser la fonction openDevice et non OPen accessory

Je test si le setfd dans la dll pose problème ==> Sans changement.


-------------------------------------------------------------------------------
Mercredi 09/12/2020

	Reprise de code de connexion DroidPandaVCom : on récupère les endpoints pour les passer à la dll, on utiliser la méthode "bulk" de transfer
	Reprise de la dll : on ajoute un device usbdev pour utiliser l'API linux de transfer USB "userspace"
	Reprise du code d'interface IUSBManager : on ajoute des fonctions R/W registre utilisant l'API Android pour les IO.
	Correction du système de log dans dllCom (bug de macro, impossible de popper la fifo...)
	Nettoyage de code.
	Reprise du code de la page : selection de la méthode d'accès au périphérique (android/native)
	Résultat : 
		- l'utilisation du device usbdev n'a pas eu le résultat espéré : on a toujours un problème de ressources non trouvée.
		- l'API android USB fonctionne : les échanges avec le device sont validés.
		
	Aujourd'hui on peut dire que les opérations réalisées côtée android sont valides : on arrive bien à ouvrir une interface vers le device, mais impossible pour la dll de la récupérer.


-------------------------------------------------------------------------------	
Jeudi 10/12/2020

	Nettoyage de code.
	Il est possible d'ouvrir un shell distant sur la plateforme (invite de commande android adb).
	Cela m'a permis de vérifier que le fd crée existe bien :
	```
		adb shell
		runs-as com.companyname
		cd /proc/29121
		shell@i15-TCL:/proc/29121 $ ls -la fd
		lrwx------ u0_a81   u0_a81            2020-12-10 16:03 34 -> /dev/bus/usb/001/034
	```
	il est possible que la lib s'exécute dans un autre contexte et que par conséquent nous n'ayons pas les droits d'accéder au fichier.
	Ajouter des droits sur le fichier /dev/bus/usb n'a pas résolu le problème.
	
-------------------------------------------------------------------------------	
Jeudi 10/12/2020
	
	Tentative d'embarquer la libusb modifiée pour android.
	Les projets VS déjà présents sont pour compiler pour windows.
	Je crée un projet VS type "makefile externe" dans le répertoire libusb/android : ajout du répertoire msvc2017
	Et alors que je chercher à installer et lancer un shell android NDK j'ai cliqué par erreur sur générer et ça s'est lancé tout seul ??!!
	````
		1>------ Début de la régénération globale : Projet : msvc2017, Configuration : Debug x86 ------
		1>Android NDK: APP_PLATFORM not set. Defaulting to minimum supported version android-14.
		1>[arm64-v8a] Compile        : usb-1.0 <= core.c
		1>[arm64-v8a] Compile        : usb-1.0 <= descriptor.c
		1>[arm64-v8a] Compile        : usb-1.0 <= hotplug.c
		1>[arm64-v8a] Compile        : usb-1.0 <= io.c
		1>[arm64-v8a] Compile        : usb-1.0 <= sync.c
		1>[arm64-v8a] Compile        : usb-1.0 <= strerror.c
		1>[arm64-v8a] Compile        : usb-1.0 <= linux_usbfs.c
		1>[arm64-v8a] Compile        : usb-1.0 <= poll_posix.c
		1>[arm64-v8a] Compile        : usb-1.0 <= threads_posix.c
		1>[arm64-v8a] Compile        : usb-1.0 <= linux_netlink.c
		1>[arm64-v8a] SharedLibrary  : libusb-1.0.so
		1>[arm64-v8a] Install        : libusb-1.0.so => libs/arm64-v8a/libusb-1.0.so
	````
	Cela l'a fait pour toutes les architectures supportées en plus!

	Intégrer dans protocomm a été classique : 
		- ajouter le répertoire d'include
		- il faut ajouter le path de recherche de lib au **bon endroit**
		- ajouter la dependance (usb-1.0)
		- le faire pour toutes les architectures
		- TODO utiliser des chemins relatifs
		
	TODO : le faire aussi dans l'application Xamarin.

-------------------------------------------------------------------------------	
Vendredi 11/12/2020

	J'ai intégré dans l'IHM la libusb (de la même façon que protocomm) pour qu'elle fasse partie de l'APK.
	Test : 	les émissions Host->device fonctionnent MAIS les lectures échouent avec un timeout.

-------------------------------------------------------------------------------	
Lundi 14/12/2020

	Je n'ai pas réussi à faire fonctionner les réceptions avec la libusb, j'abandonne la résolution de ce problème.
	La lecture du livre "unboxing android usb" m'indique une demo qui montre comment faire avec une libusb non modifiée (driver cordon cypress), mais il faut rooter l'appareil.
	Je passe donc à la mise en place d'un proxy socket sur la tablette, pour gérer côté android les échanges, avec un minimum de modification côté dll.
	
-------------------------------------------------------------------------------	
Mercredi 16/12/2020

	J'ai mis en place le proxy socket sur TCP. Cela fonctionne.
	Je n'ai pas encore cherché à fiabiliser la connexion/déconnexion de l'appareil (ça plante pour l'instant), ni celle des échanges (ie pas de reprise de communication).
	Au moins j'ai un code de base pour le serveur socket C#, et le protocole basé sur des transactions.
	A noter qu'il y aura en terme de données un overhead d'une dizaine d'octets pour chaque transaction.
	J'ai reçu un mail de la communauté libusb, qui me propose de reprendre le test avec la version officielle => Je fais ça demain.
	
-------------------------------------------------------------------------------	
Vendredi 18/12

	J'ai donc mis en place la version officielle d'android et utilisé le code que l'on m'a envoyé. Cela fonctionne parfaitement.
	J'ai essayé les tablettes suivantes :
	Cube iWork 10 - android 5 - API 22
		x câble direct uUSB Male <--> uUSB Male : OK
		x câble adaptateur uUSB-c <--> USB femelle : OK
	Samsung Galaxy Tab 10 - android 9 - API 28
		x câble direct uUSB Male + adaptateur usbc <--> uUSB Male : Ne fonctionne pas
		x câble adaptateur uUSB-c <--> USB femelle : OK
	Lenovo TBX304L - Android 8.1 - API 27
		x câble direct uUSB Male <--> uUSB Male : Ne fonctionne pas
		x câble adaptateur uUSB-c <--> USB femelle : OK
	
Lorsque le câble direct ne fonctionne pas, la LED Nucleo témoin de la connexion USB ne s'allume même pas, et la tablette android ne détecte pas la carte. C'est vraiment le câble qui est en cause.
Il faudra prendre en compte ce résultat pour le support client. Clairement lui expliquer comment connecter les appareils et quels câbles utiliser, voir même leur fournir la référence à utiliser pour avoir un support.

-------------------------------------------------------------------------------	
Lundi 29/12

	Je tente de régler le problème de crash au premier connect usb : on gère mal la demande d'autorisation (issue 12 sur github).
	PISTE 1 KO :  je conserve le process : tout est géré dans notre interface Android : j'ai donc "splité" la fonction selectDevice pour différer la connexion sur la réception de l'évènement (broadcast receiver).
	==> Ca ne suffit pas car la part Xamarin.Forms appelante poursuit ses traitements, elle doit aussi attendre la réponse.
	==> Impossible dans la partie Android d'attendre sur le broadcast receiver (ie créer une tâche attendant un signal)
	==> note : la fonction de requête native à l'USB Manager n'est pas non plus une tâche.
	
	PISTE 2 KO : Je tente d'intégrer Xamarin.Essentials qui gère les permissions (mais pas l'USB). Je m'appuie sur les exemples pour créer une interface de gestion des permissions asynchrone. 
	C'est pas simple car dans l'exemple quand on fait un request() on doit avoir la réponse hors il faut attendre le broadcast.
	Mais avec cette solution le broadcastreceiver n'est pas du tout utilisé ==> il faut désactiver ce code je pense car il doit être en conflit avec Xamarin.Essentials.
	
	PISTE 3 OK : on traite en asynchrone le résultat de la demande de permission. On ajoute un évènement dans le broadcast receiver, relayé par l'interface IUsbManager, pour que l'application continue le process de connexion.
	
-------------------------------------------------------------------------------	
Lundi 30/12

	Issue 18 et 21 corrigé (correction crash connexion & déconnexion).
	Des bugs d'IHM corrigé, ainsi que le crash du log qui arrive parfois.
	